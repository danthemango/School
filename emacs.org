#+TITLE: Emacs
* EMACS
** About
Emacs is a text editor, which is known for it's many modules and source-code editing tools. Check out the [[https://www.gnu.org/software/emacs/tour/][Emacs Tour]] for some tutorials on getting started.

To start emacs just type 'emacs' in the command line, or type
  - 'emacs (filename)' to immediately open a file called (filename)
  - 'emacs (filename) &' to open emacs with a file and send to background
    - (background means not taking over the terminal window)
    - Note: do not use '&' via ssh

Special keys and key modifiers:
| Symbol        | Meaning                     |
|---------------+-----------------------------|
| C-            | Control-                    |
| M-            | Alt- (or 'Meta-' or 'Esc-') |
| (RET)         | Enter / Return              |
| (BS) or (DEL) | Backspace                   |
| (delete)      | Delete key                  |
| (SPC)         | Spacebar                    |
| (TAB)         | Tab key                     |
| (cmd)         | A named command             |

Note that many commands require multiple sequences of keys, which may require you to let go of control/alt to finish the sequence. For example:
    - 'C-x C-b' means "Control and x, then control and b"
    - 'C-x b' which  means "control and x, then just b"

** Basics
| C-g 	          | cancel command                                     |
| C-x C-f          | open file                                          |
| C-x C-s		    | save file                                          |
| C-x C-w		    | save as ..                                         |
| C-x C-c		    | close emacs                                        |
| C-/       		 | undo                                               |
| C-g C-/          | redo [1]                                           |
| C-(SPC)          | start / end selection [2]                          |
| M-w              | copy selection                                     |
| C-w              | cut selection (i.e. copy and delete)               |
| C-y              | paste                                              |
| M-y              | cycle through copy history                         |
| C-x b            | switch to buffer [3]                               |
| C-x k            | kill a buffer                                      |
| C-x C-b          | list buffers                                       |
| C-M-v            | scroll down current window (e.g. a help window) |
| C-M-S-v          | scroll up unselected window                        |
- [1] pushing C-g toggles redo and undo mode for C-/
- [2] use the movement keys to widen selection or just drag with the mouse instead
- [3] 'buffer' means 'opened file'
- use 'M-x xterm-mouse-mode' to turn on the mouse via ssh
- use 'M-x tetris' to start playing tetris 

** Movement
| C-a / C-e       | move to start / end of line                               |
| C-p / C-n       | move to previous / next line (i.e. up/down)               |
| C-b / C-f       | move back / forward one letter                            |
| M-b / M-f       | move back / forward one word                              |
| M-v / C-v       | move up / down one screenful on current window            |
| C-M-S-v / C-M-v | move up / down one screenful on other window              |
| M-< / M->       | move to start / end of file                               |
| C-s             | search (type in prompt) / go to next result               |
| C-r             | backwards search (type in prompt) / go to previous result |
| M-C-s           | search (regular exression)                                |
| M-g M-g         | goto line #                                               |

** Editing
| (backspace)     | delete a letter-backwards                                 |
| C-d             | delete a letter-forwards                                  |
| C-(backspace)   | delete a word-backwards                                   |
| C-(delete)      | delete a word-forwards                                    |
| C-k             | delete everything right of cursor                         |
| C-S-(backspace) | delete entire line (same as C-a C-k C-k)                  |
| (F3)            | begin recording keyboard macro sequence                   |
| (F4)            | finish recording macro / play macro                       |
| C-u [N] (cmd)   | repeat command (cmd) [N] times                            |
| C-o             | insert line before                                        |

** Help
| C-h ?        | describe the quick help system                 |
| C-h i        | open info mode                                 |
| C-h r        | open emacs manual                              |
| C-h b        | list all keybindings                           |
| C-h m        | describe current minor mode                    |
| C-h c        | describe a keybinding                          |
| C-h k        | explain a keybinding                           |
| C-h f        | explain function (the ones used with M-x)      |
| C-h v        | check the state of a variable                  |
| (prefix) C-h | describe the uses of (prefix) (e.g. C-x 8 C-h) |

*** Info mode
Info mode is actually the just a wrapper around the 'info' program built into linux (accessible from the command line) since both applications developed as part of the GNU system. The info program has been integrated into every Linux system I've ever used, and I will often just open it from the command line when searching for something quickly. It is similar to the 'man' program, but while 'man' is designed to show you how to invoke (or start) a program, the 'info' program is designed to show how to use a program (E.g. check out the difference between the commands 'man emacs' and 'info emacs'). (Note: info just opens up the 'man-page' if one does not exist specifically for it)

Commands to use from within info mode (C-h i)
| Shortcut     | description                              |
|--------------+------------------------------------------|
| q            | quit                                     |
| d            | view all info documents                  |
| i            | search for topic                         |
| (TAB)        | jump to link                             |
| (RET)        | open link                                |
| h            | info tutorial                            |
| ?            | quick help                               |
| C-v / M-v    | Scroll down / up on page                 |
| (SPC) / (BS) | Scroll down / up across pages            |
| n / p        | go to previous / next page on same level |
| u            | go up a level                            |
| [ / ]        | go to previous / next page across levels |
| m            | open menu item link                      |
| t            | go to top node in current document       |
| g            | go to node name (e.g. 'top', '(emacs)')  |
   
** Window commands
you can quickly edit multiple files at once by splitting the current emacs session into multiple frames:
| C-x 0   | close current frame      |
| C-x 1   | close all other frames   |
| C-x 2   | create horizontal frame  |
| C-x 3   | create vertical frame    |
| C-x o   | switch to 'other' window |
| C-x C-+ | Text scale increase      |
| C-x C-- | Text scale decrease      |

** Extras
| C-x (TAB) | indent/dedent entire region                |
| M-y       | cycle through previous yanks (after paste) |

** Org Mode
*** Org Mode Basics
- [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][More about org-mode]]
Org mode is great for note taking, checklists and project management. Start a project in org mode by opening a file with a '.org' extension. Here are a few things you can do:

: * top-heading
: ** subheading
: some text
:
: new paragraph
: - list item
:     - sub list-item
: - [ ] checklist item
: [[https://github.com/danthemango/][a website]]

Here are a few commands used to manage org-mode headings and lists:
| Shortcut          | description                                             |
|-------------------+---------------------------------------------------------|
| (TAB)             | expand/contract elements in subheading                  |
| S-(TAB)           | expand/contract every heading                           |
| C-c C-n / C-c C-p | jump to next / previous heading                         |
| C-c C-f / C-c C-b | jump to next / previous heading at same level           |
| C-c C-u           | jump 'up' heading (higher level)                        |
| S-(down) / S-(up) | jump to next / previous line item                       |
| M-(Ret)           | insert new heading / item                               |
| M-S-(RET)         | insert new checklist item                               |
| C-c ^             | sort list                                               |
| C-c C-c           | mark item in list as sorted                             |
| C-c C-e           | export notes (e.g. use 'h h' to export to html) [1]     |
| C-c C-j           | jump to another heading temporarily (return with C-c &) |
Go to 'M-x customize-option org-export-backends' to get a list of possible export options

*** org-tables
[[http://orgmode.org/guide/Tables.html][Tables in org-mode]]

Emacs org-mode has some amazing support for creating and maintaining tables in notes. To create a table, simply start subdividing sections of text between '|' characters. So, start by typing the following characters:
#+BEGIN_EXAMPLE
|-
|heading 1 | heading 2
|-
| one | two 
| three | four 
#+END_EXAMPLE

push tab, and you should see:
#+BEGIN_EXAMPLE
|-----------+-----------|
| heading 1 | heading 2 |
|-----------+-----------|
| one       | two       |
| three     | four      |
#+END_EXAMPLE

Shortcuts for working with org-tables:
| command         | description                                   |
|-----------------+-----------------------------------------------|
| C-u 2 C-c       | create table, columns separated by two spaces |
| (TAB)           | move to next cell                             |
| S-(TAB)         | move to previous cell                         |
| M-(direction)   | move row / column in (direction)              |
| M-S-(direction) | insert now row / column in table              |
| S-(RET)         | increment previous value in below row         |

*** [[https://orgmode.org/manual/Easy-templates.html][org-mode templates]]
**** [[https://orgmode.org/manual/Literal-examples.html][org-mode example-templates]]
Type '<e' at the start of a line and push tab to open up a literal example. This will insert:
: #+BEGIN_EXAMPLE
: #+END_EXAMPLE
Which indicates the start and the end of a section which will not be formatted (i.e. like the <pre> tag in HTML).

Use ':' at the start of a line to do it only on one line. E.g.:
: : this is a literal example

**** org-mode code-template
at the beginning of the line type: <s, push tab, and you should end up with:
: #+BEGIN_SRC 
: #+END_SRC

Put some source code between those blocks, and they will be highlighted by the system (I specified the language "Python"):
#+BEGIN_EXAMPLE
#+BEGIN_SRC python :results output
print("hello world");
#+END_SRC
#+END_EXAMPLE

Here is what it looks like in org-mode:
#+BEGIN_SRC python :results output
print("hello world")
#+END_SRC

***** running code
With [[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]], some languages can be interpreted in-place without leaving your org-mode file. To enable a language, use M-x 'customize', search for 'Org Babel Load Languages', add and enable any languages you want. [[http://ergoemacs.org/emacs/emacs_org_babel_literate_programing.html][More Info]].

After enabling the Python language for example, org mode prints the following after pushing C-c C-c on top of the source code above:
: #+RESULTS:
: : hello world

Note: add ':results value' or ':results output' for the return value or the printout (STDOUT) of a program. [[https://orgmode.org/manual/results.html][More Info]].
*** [[http://orgmode.org/manual/Export-settings.html#Export-settings][org-mode exporting]]
Org-mode formatted files can be exported in pdf, html, md, and other formats. [[https://orgmode.org/worg/org-tutorials/org-jekyll.html][How to build a Block with org-mode]].
- use 'C-c C-e h h' for example to export to html.

** Bookmarks
| C-x r m | create bookmark  |
| C-x r b | jump to bookmark |
| C-x r l | list bookmarks   |

** Named commands
Basic usage of named commands:
| Keys      | description             |
|-----------+-------------------------|
| M-x (cmd) | run named command       |
| M-x (tab) | list all named commands |
| C-h f     | help with named command |

** M-x Commands
Here are some commands I've found helpful:
| M-x command             | description                                                   |
|-------------------------+---------------------------------------------------------------|
| apropos                 | search for command by name                                    |
| tetris                  | play tetris                                                   |
| customize               | turn on/off any settings in emacs [1]                         |
| customize-option        | change variables in any emacs groups                          |
| customize-themes        | change the look of emacs                                      |
| term                    | opens up a terminal [2]                                       |
| shell                   | opens up a shell                                              |
| eshell                  | opens up an emacs shell [3]                                   |
| info                    | emacs (and linux) manuals                                     |
| man                     | opens up a man page (as opposed to info mode)                 |
| toggle-truncate-lines   | word-wrapping                                                 |
| desktop-save            | save the current emacs session [4]                            |
| package-list-packages   | open menu for other addons to get for emacs [5]               |
| set-variable            | set emacs variable                                            |
| rectangle-mark-mode     | select a rectangle selection                                  |
| string-insert-rectangle | insert text in rectangle selection                            |
| clean-buffer-list       | remove buffers                                                |
| ido-mode                | list buffers during a change of buffer (C-f disables it temp) |
| uniquify                | gives unique name to non-uniquely named buffers               |
| occur                   | list all occurances in buffers                                |
| find-dired              | searches for file with a given name                           |
| locate                  | locate command                                                |
| compile                 | compile program                                               |
1. customizations are installed to ~/.emacs.d/ and loaded via ~/.emacs
2. from with 'term' you need to use other buttons to move around:
  - use 'C-c b' to switch buffers rather than the standard 'C-x b'
  - use 'C-c C-c' to cancel program execution rather than the standard 'C-c'
- will not do multiple terminals, consider installing multi-term
3.  almost a regular shell, but also accepts emacs commands (and lisp) 
  - e.g. (+ 2 2)
4.  use 'emacs -f desktop-read' to open it with that previous session 
5.  melpa is a package which expands this list
6.  use 'C-h v' to check the state of an emacs variable

** Dir mode
- dir mode is used in an opened directory
- e.g.: use C-x C-f ~ (RET) to open the home directory
| key       | description                  |
|-----------+------------------------------|
| n / p     | move down / up               |
| f / (RET) | open file or directory       |
| h         | help                         |
| ?         | quick help                   |
| ^         | go up directory              |
| +         | create new directory         |
| q         | quit                         |
| shift+c   | copy file                    |
| shift+a   | grep (search through) files  |
| shift+r   | rename file                  |
| s         | re-sort files                |
| m         | mark file                    |
| !         | run shell command on file(s) |
| d         | mark for deletion            |
| x         | (execute) run deletion       |
| u         | unmark                       |

** Packages I've installed
- melpa: provides extra packages
- nyan-cat: novelty scroll-bar (M-x nyan-mode)
- server-mode: automatically start emacs server mode with a call to 'emacsclient'
- base16-monokai: good looking theme for emacs
  - set via M-x customize-themes
- jekyll-modes: plugin for jekyll blog editing system
- octopress: plugin for the octopress static-site development system
- dired-details.el: hides directories within 'dir-mode' in emacs
  - start with 'M-x dired-hide-details-mode', or with '('

** Lisp
| command       | description                            |
|---------------+----------------------------------------|
| M-x lisp-mode | enter lisp-mode                        |
| M-x eshell    | open the emacs shell [1]               |
| M-:           | evaluate lisp expression in minibuffer |
| C-x C-e       | evaluate lisp expression before cursor |
- [1] the eshell is a command-line terminal which uses emacs-lisp instead of bash
- consider entering lisp interactive mode to debug lisp
- C-u <Esc> C-x enters edebug more for lisp-interactive-mode
*** slime mode
I'm actually using [[https://common-lisp.net/project/slime/][SLIME mode]] for better lisp interpreting (emacs lisp is by design weaker than common lisp).
** Running emacs commands from the command line
Use 'emacs --batch -f command' from the command line if you want to run the equivalent of an M-x command without opening emacs.

For example I sometimes use the following command to compile org-mode files to emacs:
#+BEGIN_SRC bash
emacs myfile.org --batch -f org-html-export-to-html
#+END_SRC
Also append '--kill' if the command is not designed to stop emacs on its own.
** Other
I watched [[https://www.youtube.com/playlist?list=PLxj9UAX4Em-IiOfvF2Qs742LxEK4owSkr][this video series]] to get started on emacs, and besides the man-pages and org-mode website I found [[http://zoo.cs.yale.edu/classes/cs210/help/emacs.html][this page]] pretty useful.
