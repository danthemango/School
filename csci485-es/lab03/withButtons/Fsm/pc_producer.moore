package Fsm::pc_producer;
#================================================================--
# File Name    : Fsm/pc_producer.moore
#
# Purpose      : the producer machine
#
# Author       : Daniel Guenther, Vancouver Island University
#
# System       : Perl (Linux)
#
#=========================================================

# TODO finish this

$|=1;
use strict;
use warnings;

use Table::SVAR;
use Table::SEMAPHORE;

include(moore.pl)

moore_Begin

moore_TableBegin("checkBuffer")

my $ns;

# Current State Action Next State
# check buffer state used to check if the buffer has some space to hold anything produced
moore_TableRow(
   "checkBuffer"
    ,
    # ensure the producer is currently enabled
    if(Table::SVAR->get_value("sv_producer_enable")){
        print("Producer start\n");
        Table::SEMAPHORE->wait(semaphore => "emptyCount", task => "pc_producer");
        print(Table::SEMAPHORE->get_value("emptyCount"));
        print("\n");
        $ns = "checkMutex";
    }else{
        print("Producer disabled\n");
        $ns = "checkBuffer";
    }
    ,
    $ns
)

# check if the buffer is open for writing
moore_TableRow(
   "checkMutex"
   ,
   Table::SEMAPHORE->wait(semaphore => "bufferLockMutex", task => "pc_producer");
   $ns = "productionStart";
   ,
   $ns
)

# produce item
moore_TableRow(
    "productionStart"
    ,
    print("Producing\n");
    Table::SVAR->assign("sv_produce",1);
    $ns = "productionEnd";
    ,
    $ns
)

# finish production
moore_TableRow(
   "productionEnd"
   ,
   Table::SVAR->assign("sv_produce",0);
   Table::SEMAPHORE->signal(semaphore => "bufferLockMutex");
   # DEBUG check the lock mutex
   Table::SEMAPHORE->signal(semaphore => "fillCount");
   $ns = "checkBuffer";
   ,
   $ns
)

moore_TableEnd

moore_Reset

moore_End

1;

